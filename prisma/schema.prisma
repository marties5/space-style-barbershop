// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId   String   @unique @map("clerk_id") @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  firstName String?  @map("first_name") @db.VarChar(100)
  lastName  String?  @map("last_name") @db.VarChar(100)
  avatarUrl String?  @map("avatar_url") @db.Text
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  groupRoles    GroupRole[]   @relation("UserGroupRoles")
  assignedRoles GroupRole[]   @relation("AssignedBy")
  Operasional   Operasional[]

  @@index([clerkId], map: "idx_users_clerk_id")
  @@index([email], map: "idx_users_email")
  @@map("users")
}

model Group {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  groupRoles GroupRole[]
  menuRoles  MenuRole[]

  @@map("groups")
}

model Menu {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(100)
  path      String?  @unique @db.VarChar(255)
  icon      String?  @db.VarChar(50)
  parentId  String?  @map("parent_id") @db.Uuid
  sortOrder Int      @default(0) @map("sort_order")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  parent    Menu?      @relation("MenuHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  Menu[]     @relation("MenuHierarchy")
  menuRoles MenuRole[]

  @@index([parentId], map: "idx_menus_parent_id")
  @@map("menus")
}

model GroupRole {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  groupId    String   @map("group_id") @db.Uuid
  assignedBy String?  @map("assigned_by") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamptz(6)

  user     User  @relation("UserGroupRoles", fields: [userId], references: [id], onDelete: Cascade)
  group    Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  assigner User? @relation("AssignedBy", fields: [assignedBy], references: [id])

  @@unique([userId, groupId])
  @@index([userId], map: "idx_group_roles_user_id")
  @@index([groupId], map: "idx_group_roles_group_id")
  @@map("group_roles")
}

model MenuRole {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  groupId   String  @map("group_id") @db.Uuid
  menuId    String  @map("menu_id") @db.Uuid
  canRead   Boolean @default(true) @map("can_read")
  canWrite  Boolean @default(false) @map("can_write")
  canDelete Boolean @default(false) @map("can_delete")
  canUpdate Boolean @default(false) @map("can_update")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  menu  Menu  @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@unique([groupId, menuId])
  @@index([groupId], map: "idx_menu_roles_group_id")
  @@index([menuId], map: "idx_menu_roles_menu_id")
  @@map("menu_roles")
}

model Customer {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  phone        String?       @db.VarChar(20)
  email        String?       @db.VarChar(255)
  address      String?       @db.Text
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  transactions Transaction[]

  @@map("customers")
}

model Service {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(255)
  price            Decimal           @db.Decimal(10, 2)
  imageUrl         String?           @map("image_url") @db.VarChar(500)
  isActive         Boolean           @default(true) @map("is_active")
  discount         Int?
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  transactionItems TransactionItem[]

  @@map("services")
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(255)
  price         Decimal  @db.Decimal(10, 2)
  costPrice     Decimal  @default(0) @map("cost_price") @db.Decimal(10, 2)
  stockQuantity Int      @default(0) @map("stock_quantity")
  minStockLevel Int      @default(5) @map("min_stock_level")
  imageUrl      String?  @map("image_url") @db.VarChar(500)
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  transactionItems TransactionItem[]

  @@map("products")
}

model StaffLevel {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  rank        Int
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  staff Staff[]
}

model Staff {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(255)
  role    String? @db.VarChar(100)
  levelId Int?    @map("level_id")

  phone          String?  @db.VarChar(20)
  email          String?  @db.VarChar(255)
  commissionRate Decimal? @default(0) @map("commission_rate") @db.Decimal(5, 2)
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  transactions Transaction[]
  dailySales   DailySales[]
  level        StaffLevel?   @relation(fields: [levelId], references: [id])

  @@map("staff")
}

model Transaction {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transactionNumber String   @unique @map("transaction_number") @db.VarChar(50)
  customerId        Int?     @map("customer_id")
  staffId           Int?     @map("staff_id")
  subtotal          Decimal  @default(0) @db.Decimal(10, 2)
  taxAmount         Decimal  @default(0) @map("tax_amount") @db.Decimal(10, 2)
  discountAmount    Decimal  @default(0) @map("discount_amount") @db.Decimal(10, 2)
  totalAmount       Decimal  @default(0) @map("total_amount") @db.Decimal(10, 2)
  paymentMethod     String   @default("cash") @map("payment_method") @db.VarChar(50)
  paymentStatus     String   @default("completed") @map("payment_status") @db.VarChar(20)
  notes             String?  @db.Text
  transactionDate   DateTime @default(now()) @map("transaction_date") @db.Timestamp(6)
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  transaction_type  String   @default("mixed") @db.VarChar(20)

  customer         Customer?         @relation(fields: [customerId], references: [id])
  staff            Staff?            @relation(fields: [staffId], references: [id])
  transactionItems TransactionItem[]

  @@index([transactionDate], map: "idx_transactions_date")
  @@index([staffId], map: "idx_transactions_staff")
  @@map("transactions")
}

model TransactionItem {
  id            Int         @id @default(autoincrement())
  transactionId String      @map("transaction_id") @db.Uuid
  itemType      String      @map("item_type") @db.VarChar(20)
  itemId        Int         @map("item_id")
  itemName      String      @map("item_name") @db.VarChar(255)
  quantity      Int         @default(1)
  unitPrice     Decimal     @map("unit_price") @db.Decimal(10, 2)
  totalPrice    Decimal     @map("total_price") @db.Decimal(10, 2)
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  service       Service?    @relation(fields: [itemId], references: [id], map: "transaction_items_service_fkey")
  product       Product?    @relation(fields: [itemId], references: [id], map: "transaction_items_product_fkey")

  @@index([transactionId], map: "idx_transaction_items_transaction")
  @@map("transaction_items")
}

model DailySales {
  id                Int      @id @default(autoincrement())
  saleDate          DateTime @map("sale_date") @db.Date
  staffId           Int?     @map("staff_id")
  totalTransactions Int      @default(0) @map("total_transactions")
  totalServices     Int      @default(0) @map("total_services")
  totalProducts     Int      @default(0) @map("total_products")
  grossSales        Decimal  @default(0) @map("gross_sales") @db.Decimal(10, 2)
  netSales          Decimal  @default(0) @map("net_sales") @db.Decimal(10, 2)
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  staff Staff? @relation(fields: [staffId], references: [id])

  @@unique([saleDate, staffId])
  @@index([saleDate], map: "idx_daily_sales_date")
  @@map("daily_sales")
}

model Operasional {
  id        Int      @id @default(autoincrement())
  tanggal   DateTime @default(now())
  kategori  String
  deskripsi String
  jumlah    Decimal  @db.Decimal(12, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.Uuid

  @@map("operational")
}

model FileStorage {
  id        Int      @id @default(autoincrement())
  filename  String
  mimetype  String
  data      String   @db.Text
  createdAt DateTime @default(now())

  @@index([filename], map: "idx_file_storage_filename")
  @@index([mimetype], map: "idx_file_storage_mimetype")
  @@index([createdAt], map: "idx_file_storage_created_at")
  @@map("file_storage")
}
